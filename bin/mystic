#!/usr/bin/env ruby

require "mystic"

MIGRATIONS_PATH = "./mystic/migrations/"
MIGRATIONS_LOCATION = MIGRATIONS_PATH + "*.rb"

MIG_TEMPLATE = <<-mig_template
#!/usr/bin/env ruby

require "mystic"

class <MIGRATION_CLASS_NAME> < Mystic::Migration
  def up
    
  end
  
  def down
    
  end
end
mig_template

# 1_MigrationClassName.rb

def mig_path
  File.app_root + "/mystic/migrations/"
end

# I know this is really hacky
def migration_paths(order_matters, paths_to_reject)
  mp = mig_path()
  filenames = Dir.entries(mp) - paths_to_reject - [".", "..", ".DS_Store"]
  filenames.sort!{ |a,b| a.split("_").first.to_i <=> b.split("_").first.to_i } if order_matters
  filenames.map{ |filename| mp + filename }
end

case ARGV[0]
when "setup"

  Mystic.execute("CREATE TABLE IF NOT EXISTS mystic_migrations (filename TEXT)")
  
when "create"
  
  case ARGV[1]
  when "migration"
    
    mg = mig_path()
    mig_name = ARGV[2].strip.capitalize
    
    Kernel.abort if mig_name.length == 0
    
    highest_mig_num = Dir.entries[mp].inject do |highest, filename|
      mig_num = filename.split("_").first.to_i
      mig_num if mig_num > highest
      highest
    end
    
    file = File.open(mp + highest_mig_num + "_" + mig_name + ".rb", "w+")
    file << MIG_TEMPLATE.sub("<MIGRATION_CLASS_NAME>",mig_name)
    
  end
  
when "migrate"
  
  migrated_filenames = []
  
  Mystic.execute("SELECT * FROM mystic_migrations").each do |tuple|
    migrated_filenames << tuple["filename"]
  end
  
  files = migration_paths(true, migrated_filenames)
  
  files.each do |file|
    # apply the migration
    filename = file.split("/").last
    migration_code = File.read(file)
    eval(migration_code) # define the migration class
    
    migration_name = filename.split("_").last.split(".").first
    
    migration = Object.const_get(migration_name).new
    migration.up
    Mystic.execute("INSERT INTO mystic_migrations VALUES('#{filename}')")
  end
  
when "rollback"
  
  migrated_filenames = []
  
  Mystic.execute("SELECT * FROM mystic_migrations").each do |tuple|
    migrated_filenames << tuple["filename"]
  end
  
  if migrated_filenames.count > 0
    migrated_filenames.sort!{ |a,b| a.split("_").first.to_i <=> b.split("_").first.to_i }
  
    filename = migrated_filenames.last
  
    migration_code = File.read(mig_path() + filename)
    eval(migration_code)
  
    migration_name = filename.split("_").last.split(".").first
  
    migration = Object.const_get(migration_name).new
    migration.down
    Mystic.execute("DELETE FROM mystic_migrations WHERE filename='#{filename}'")
  end
  
end