#!/usr/bin/env ruby

require "mystic"

MIGRATIONS_PATH = "./mystic/migrations/"
MIGRATIONS_LOCATION = MIGRATIONS_PATH + "*.rb"

MIG_TEMPLATE = <<-mig_template
#!/usr/bin/env ruby

require "mystic"

class <MIGRATION_CLASS_NAME> < Mystic::Migration
  def up
    
  end
  
  def down
    
  end
end
mig_template

# 1_MigrationClassName.rb

# I know this is really hacky
def migration_paths(order_matters, paths_to_reject)
  filenames = Dir[MIGRATIONS_LOCATION] - paths_to_reject
  filenames.sort!{ |a,b| a.split("_").first.to_i <=> b.split("_").first.to_i } if order_matters
  filenames.each{ |filename| File.expand_path(File.dirname(filename) + filename) }
end

case ARGV[0]
when "setup"

  Mystic.execute("CREATE TABLE IF NOT EXISTS mystic_migrations (filename TEXT)")
  
when "create"
  
  case ARGV[1]
  when "migration"
    
    mig_name = ARGV[2].strip.capitalize
    
    Kernel.abort if mig_name.length == 0
    
    highest_mig_num = Dir[MIGRATIONS_LOCATION].inject do |highest, filename|
      mig_num = filename.split("_").first.to_i
      mig_num if mig_num > highest
      highest
    end
    
    file = File.open(MIGRATIONS_PATH + highest_mig_num + "_" + mig_name + ".rb", "w+")
    file << MIG_TEMPLATE.sub("<MIGRATION_CLASS_NAME>",mig_name)
    
  end
  
when "migrate"
  
  migrated_filenames = []
  
  Mystic.execute("SELECT * FROM mystic_migrations").each do |tuple|
    migrated_filenames << tuple["filename"]
  end
  
  files = Dir[MIGRATIONS_LOCATION].reject { |filename| migrated_filenames.include?(filename) }
  
  files.each do |file|
    # apply the migration
    filename = File.split(file).last
    migration_code = File.read(file)
    eval(migration_code)
    
    migration_name = filename.split("_").last.split(".").first
    
    migration = Object.const_get(migration_name).new
    migration.up
    Mystic.execute("INSERT INTO mystic_migrations VALUES(#{filename})")
  end
  
when "rollback"
  filename = Dir[MIGRATIONS_LOCATION].last
  
  migration_code = File.read(MIGRATIONS_PATH + filename)
  
  Kernel.abort if migration_code.nil?
  
  eval(migration_code)
  
  migration_name = filename.split("_").last.split(".").first
  
  migration = Object.const_get(migration_name).new
  migration.down
  Mystic.execute("DELETE FROM mystic_migrations WHERE filename='#{filename}'")
end